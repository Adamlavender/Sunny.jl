# Hamiltonian model parameters and energy/force calculations


mutable struct HamiltonianCPU # -> Model
    ext_field :: Vector{Vec3}
    anisos    :: Vector{SingleIonAnisotropy}
    pairints  :: Vector{PairInteractions}
    ewald     :: Union{Nothing, EwaldCPU}
end

function HamiltonianCPU(crystal::Crystal, N)
    nb = nbasis(crystal)
    ext_field = zeros(Vec3, nb)
    anisos = fill(SingleIonAnisotropy(N), nb)
    pairints = [PairInteractions() for _ in 1:nb]
    ewald = nothing

    return HamiltonianCPU(ext_field, anisos, pairints, ewald)
end


function validate_atom_range(cryst::Crystal, a::Int)
    (1 <= a <= nbasis(cryst)) || error("Atom index $a is out of range.")
end

function propagate_exchange!(hamiltonian::HamiltonianCPU, cryst::Crystal, J::Mat3, J_biq::Float64, bond::Bond)
    # Verify that atom indices are in range
    validate_atom_range(cryst, bond.i)
    validate_atom_range(cryst, bond.j)

    # Verify that exchange is symmetry-consistent
    if !is_coupling_valid(cryst, bond, J)
        println("Symmetry-violating exchange: $J.")
        println("Use `print_bond(crystal, $bond)` for more information.")
        error("Interaction violates symmetry.")
    end

    # Biquadratic interactions not yet supported in SU(N) mode
    N = size(hamiltonian.anisos[1].matrep, 1)
    if !iszero(J_biq) && N > 0
        error("Biquadratic interactions not yet supported in SU(N) mode.")
    end

    # Print a warning if an interaction already exists for bond
    (; heisen, exchng, biquad) = hamiltonian.pairints[bond.i]
    if any(x -> x[2] == bond, vcat(heisen, exchng, biquad))
        println("Warning: Overriding exchange for bond $bond.")
    end

    isheisen = isapprox(diagm([J[1,1],J[1,1],J[1,1]]), J; atol=1e-12)

    for (i, (; heisen, exchng, biquad)) in enumerate(hamiltonian.pairints)
        for (bond‚Ä≤, J‚Ä≤) in zip(all_symmetry_related_couplings_for_atom(cryst, i, bond, J)...)
            # Remove any existing interactions for bond‚Ä≤
            matches_bond(x) = x[2] == bond‚Ä≤
            filter!(!matches_bond, heisen)
            filter!(!matches_bond, exchng)
            filter!(!matches_bond, biquad)

            # The energy or force calculation only needs to see each bond once.
            # Use a trick below to select half the bonds to cull.
            bond_delta = (bond‚Ä≤.j - bond‚Ä≤.i, bond‚Ä≤.n...)
            @assert bond_delta != (0, 0, 0, 0)
            isculled = bond_delta > (0, 0, 0, 0)

            if isheisen
                @assert J ‚âà J‚Ä≤
                push!(heisen, (isculled, bond‚Ä≤, J‚Ä≤[1,1]))
            else
                push!(exchng, (isculled, bond‚Ä≤, J‚Ä≤))
            end

            if !iszero(J_biq)
                push!(biquad, (isculled, bond‚Ä≤, J_biq))
            end
        end

        # Sort interactions so that non-culled bonds appear first
        sort!(heisen, by=first)
        sort!(exchng, by=first)
        sort!(biquad, by=first)
    end
end


function propagate_anisotropies!(hamiltonian::HamiltonianCPU, cryst::Crystal, b::Int, op::DP.AbstractPolynomialLike, N::Int)
    iszero(op) && return 

    validate_atom_range(cryst, b)

    if !iszero(hamiltonian.anisos[b].op)
        println("Warning: Overriding anisotropy for atom $b.")
    end

    if !is_anisotropy_valid(cryst, b, op)
        println("Symmetry-violating anisotropy: $op.")
        println("Use `print_site(crystal, $b)` for more information.")
        error("Invalid anisotropy.")
    end

    for (b‚Ä≤, op‚Ä≤) in zip(all_symmetry_related_anisotropies(cryst, b, op)...)
        matrep = operator_to_matrix(op‚Ä≤; N)

        S = (N-1)/2
        c = operator_to_classical_stevens_coefficients(op‚Ä≤, S)
        all(iszero.(c[[1,3,5]])) || error("Odd-ordered dipole anisotropies not supported.")
        c2 = SVector{ 5}(c[2])
        c4 = SVector{ 9}(c[4])
        c6 = SVector{13}(c[6])
        kmax = max(!iszero(c2)*2, !iszero(c4)*4, !iszero(c6)*6)
        clsrep = ClassicalStevensExpansion(kmax, c2, c4, c6)

        hamiltonian.anisos[b‚Ä≤] = SingleIonAnisotropy(op‚Ä≤, matrep, clsrep)
    end
end

function energy(dipoles::Array{Vec3, 4}, coherents::Array{CVec{N}, 4}, ‚Ñã::HamiltonianCPU, Œ∫s::Vector{Float64}) where N
    E = 0.0
    latsize = size(dipoles)[1:3]

    # Zeeman coupling to external field
    @inbounds for idx in CartesianIndices(dipoles)
        E -= ‚Ñã.ext_field[idx[4]] ‚ãÖ dipoles[idx]
    end

    # Single-ion anisotropy, dipole or SUN mode
    if N == 0
        for idx in CartesianIndices(coherents)
            E_idx, _ = energy_and_gradient_for_classical_anisotropy(dipoles[idx], ‚Ñã.anisos[idx[4]].clsrep)
            E += E_idx
        end
    else
        for idx in CartesianIndices(coherents)
            Œõ = ‚Ñã.anisos[idx[4]].matrep
            Œ∫ = Œ∫s[idx[4]]
            Z = coherents[idx]
            E += Œ∫ * real(Z' * Œõ * Z)
        end
    end

    for (; heisen, exchng, biquad) in ‚Ñã.pairints
        # Heisenberg exchange
        for (culled, bond, J) in heisen
            culled && break
            for cell in CartesianIndices(latsize)
                s·µ¢ = dipoles[cell, bond.i]
                s‚±º = dipoles[offsetc(cell, bond.n, latsize), bond.j]
                E += J * dot(s·µ¢, s‚±º)
            end
        end
        # Quadratic exchange
        for (culled, bond, J) in exchng
            culled && break
            for cell in CartesianIndices(latsize)
                s·µ¢ = dipoles[cell, bond.i]
                s‚±º = dipoles[offsetc(cell, bond.n, latsize), bond.j]
                E += dot(s·µ¢, J, s‚±º)
            end
        end
        # Biquadratic exchange
        for (culled, bond, J) in biquad
            culled && break
            for cell in CartesianIndices(latsize)
                s·µ¢ = dipoles[cell, bond.i]
                s‚±º = dipoles[offsetc(cell, bond.n, latsize), bond.j]
                E += J * dot(s·µ¢, s‚±º)^2
            end
        end
    end

    # Long-range dipole-dipole
    if !isnothing(‚Ñã.ewald)
        E += energy(dipoles, ‚Ñã.ewald)
    end
    return E
end


# Computes the change in energy for an update to spin state
function energy_local_delta(dipoles::Array{Vec3, 4}, coherents::Array{CVec{N}, 4}, ‚Ñã::HamiltonianCPU, Œ∫s::Vector{Float64}, idx, s::Vec3, Z::CVec{N}) where N
    s‚ÇÄ = dipoles[idx]
    Z‚ÇÄ = coherents[idx]
    Œîs = s - s‚ÇÄ
    ŒîE = 0.0

    cell, b = splitidx(idx)
    latsize = size(dipoles)[1:3]

    # Zeeman coupling to external field
    ŒîE -= ‚Ñã.ext_field[b] ‚ãÖ Œîs

    # Single-ion anisotropy, dipole or SUN mode
    if N == 0
        E_new, _ = energy_and_gradient_for_classical_anisotropy(s, ‚Ñã.anisos[b].clsrep)
        E_old, _ = energy_and_gradient_for_classical_anisotropy(s‚ÇÄ, ‚Ñã.anisos[b].clsrep)
        ŒîE += E_new - E_old
    else
        Œõ = ‚Ñã.anisos[b].matrep
        ŒîE += Œ∫s[b] * real(dot(Z, Œõ, Z) - dot(Z‚ÇÄ, Œõ, Z‚ÇÄ))
    end

    (; heisen, exchng, biquad) = ‚Ñã.pairints[b]
    # Heisenberg exchange
    for (_, bond, J) in heisen
        s‚±º = dipoles[offsetc(cell, bond.n, latsize), bond.j]
        ŒîE += J * (Œîs ‚ãÖ s‚±º)
    end
    # Quadratic exchange
    for (_, bond, J) in exchng
        s‚±º = dipoles[offsetc(cell, bond.n, latsize), bond.j]
        ŒîE += dot(Œîs, J, s‚±º)
    end
    # Biquadratic exchange
    for (_, bond, J) in biquad
        s‚±º = dipoles[offsetc(cell, bond.n, latsize), bond.j]
        ŒîE += J * ((s ‚ãÖ s‚±º)^2 - (s‚ÇÄ ‚ãÖ s‚±º)^2)
    end

    if !isnothing(‚Ñã.ewald)
        ŒîE += energy_delta(dipoles, ‚Ñã.ewald, idx, s)
    end

    return ŒîE
end



"""
Updates `B` in-place to hold the local field on `spins` under `‚Ñã`,
defined as:

``ùêÅ_i = -‚àá_{ùê¨_i} ‚Ñã ``.
"""
function set_forces!(B::Array{Vec3, 4}, dipoles::Array{Vec3, 4}, ‚Ñã::HamiltonianCPU)
    # KBTODO remove this hack!
    N = size(‚Ñã.anisos[1].matrep, 1)
    latsize = size(B)[1:3]

    fill!(B, zero(Vec3))

    # Zeeman coupling
    @inbounds for idx in CartesianIndices(dipoles)
        B[idx] += ‚Ñã.ext_field[idx[4]]
    end

    # Single-ion anisotropy only contributes in dipole mode. In SU(N) mode, the
    # anisotropy matrix will be incorporated directly into ‚Ñå.
    if N == 0
        for idx in CartesianIndices(dipoles)
            _, gradE = energy_and_gradient_for_classical_anisotropy(dipoles[idx], ‚Ñã.anisos[idx[4]].clsrep)
            B[idx] -= gradE
        end
    end
    
    for (; heisen, exchng, biquad) in ‚Ñã.pairints
        # Heisenberg exchange
        for (culled, bond, J) in heisen
            culled && break
            for cell·µ¢ in CartesianIndices(latsize)
                cell‚±º = offsetc(cell·µ¢, bond.n, latsize)
                s·µ¢ = dipoles[cell·µ¢, bond.i]
                s‚±º = dipoles[cell‚±º, bond.j]
                B[cell·µ¢, bond.i] -= J  * s‚±º
                B[cell‚±º, bond.j] -= J' * s·µ¢
            end
        end
        # Quadratic exchange
        for (culled, bond, J) in exchng
            culled && break
            for cell·µ¢ in CartesianIndices(latsize)
                cell‚±º = offsetc(cell·µ¢, bond.n, latsize)
                s·µ¢ = dipoles[cell·µ¢, bond.i]
                s‚±º = dipoles[cell‚±º, bond.j]
                B[cell·µ¢, bond.i] -= J  * s‚±º
                B[cell‚±º, bond.j] -= J' * s·µ¢
            end
        end
        # Biquadratic exchange
        for (culled, bond, J) in biquad
            culled && break
            for cell·µ¢ in CartesianIndices(latsize)
                cell‚±º = offsetc(cell·µ¢, bond.n, latsize)
                s·µ¢ = dipoles[cell·µ¢, bond.i]
                s‚±º = dipoles[cell‚±º, bond.j]
                B[cell·µ¢, bond.i] -= 2J  * s‚±º * (s·µ¢‚ãÖs‚±º)
                B[cell‚±º, bond.j] -= 2J' * s·µ¢ * (s·µ¢‚ãÖs‚±º)
            end
        end
    end

    if !isnothing(‚Ñã.ewald)
        accum_force!(B, dipoles, ‚Ñã.ewald)
    end
end

